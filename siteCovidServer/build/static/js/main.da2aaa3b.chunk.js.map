{"version":3,"sources":["core/workWithServer.js","components/Button.js","redux/actions/actions.js","redux/actions/actionsType.js","components/Login.js","components/Header.js","components/ListOfPerson.js","components/MakeReport.js","components/SeeReport.js","components/ListForEntering.js","components/Home.js","App.js","redux/reducers/user.js","redux/rootReducer.js","index.js"],"names":["workWithServer","initUser","requestPost","login","data","logOut","getListOfCity","getListOfPerson","setListOfPerson","getListOfStatus","setListOfReport","getListOfReport","getListOfRank","getListOfGroup","status","response","Promise","resolve","json","reject","Error","statusText","request","url","body","a","fetch","then","headers","csrfmiddlewaretoken","getCookie","credentials","method","mode","JSON","stringify","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","undefined","Button","icon","type","text","onClick","className","disabled","classNameText","classes","push","join","user","connect","dispatch","useState","setName","validName","setValidName","password","setPassword","validPassword","setValidPassword","onSubmit","e","preventDefault","length","is_initial","catch","htmlFor","id","placeholder","value","onChange","target","state","headerRef","ref","username","group","ListOfPerson","setShowBody","toggleCleared","setToggleCleared","idNewRow","setIdNewRow","listWithCity","setListWithCity","listWithRank","setListWithRank","listOfPerson","selectedRows","refIs_military","createRef","refRank_id","refName","refCity_id","refIs_woman_with_children","useEffect","filter","el","is_editable","map","current","is_military","toString","Number","rank_id","city_id","is_woman_with_children","columns","selector","sortable","cell","row","key","prev","actions","prevState","contextActions","idOfRows","indexOf","title","selectableRows","pagination","onSelectedRowsChange","contextMessage","singular","plural","message","clearSelectedRows","MakeReport","Date","startDate","setStartDate","refStatus","refComment","listStatus","setListStatus","elem","status_id","setTimeout","comment","index","obj","userForControl_id","selected","date","dateFormat","toLocaleString","makeTableData","mass","group_id__name","rank_id__name","SeeReport","printRef","listOfCity","setListOfCity","onWorkAll","onWorkMilitary","onWorkPeople","onWorkMilitaryWithChildren","onWorkPeopleWithChildren","withDisease","withNoInfectionAmb","status_id__name","withNoInfectionStat","withPnevmoniaAmb","withPnevmoniaStat","withRespiratornoAmb","withRespiratornoStat","withKarantin","withCovidAmb","withCovidStat","classList","add","window","print","remove","ListForEntering","listOfGroup","setListOfGroup","toLocaleDateString","byGroup","person","group_id","style","pageBreakAfter","showBody","mainButton","mainButtonForControl","bodyForControl","bodyForCentre","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da2aaa3b.chunk.js","sourcesContent":["const workWithServer = () => {\n  return {\n    initUser: () => {\n      return requestPost('/initUser/')\n    },\n    login: (data) => {\n      return requestPost('/login/', data)\n    },\n    logOut: () => {\n      return requestPost('/logout/',)\n    },\n    getListOfCity: () => {\n      return requestPost('/getListOfCity/',)\n    },\n    getListOfPerson: () => {\n      return requestPost('/getListOfPerson/',)\n    },\n    setListOfPerson: (data) => {\n      return requestPost('/setListOfPerson/', data)\n    },\n    getListOfStatus: () => {\n      return requestPost('/getListOfStatus/')\n    },\n    setListOfReport: (data) => {\n      return requestPost('/setListOfReport/', data)\n    },\n    getListOfReport: (data) => {\n      return requestPost('/getListOfReport/', data)\n    },\n    getListOfRank: (data) => {\n      return requestPost('/getListOfRank/', data)\n    },\n    getListOfGroup: (data) => {\n      return requestPost('/getListOfGroup/', data)\n    },\n  }\n};\n\nexport default workWithServer()\n\nfunction status(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response.json())\n  } else {\n    return Promise.reject(new Error(response.statusText))\n  }\n}\n\nasync function request(url, body) {\n  return await fetch(url, body).then(status);\n}\n\nasync function requestPost(url, data) {\n  const headers = {\n    'Accept': 'application/json, text/plain, */*',\n    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    'X-Requested-With': 'XMLHttpRequest',\n  };\n  let csrfmiddlewaretoken = getCookie('csrftoken');\n  csrfmiddlewaretoken && (headers['X-CSRFToken'] = csrfmiddlewaretoken);\n  return await request(url, {\n    credentials: 'include',\n    method: 'POST',\n    mode: 'same-origin',\n    headers: headers,\n    body: JSON.stringify(data)\n  })\n}\n\nfunction getCookie(name) {\n  let matches = document.cookie.match(new RegExp(\n    \"(?:^|; )\" + name.replace(/([.$?*|{}()[]\\/+^])/g, '\\\\$1') + \"=([^;]*)\"\n  ))\n  return matches ? decodeURIComponent(matches[1]) : undefined\n}\n\nconst setCookie = (name, value, props = {'Path': '/', maxAge: 1800}) => {\n  let exp = props.expires\n  if (typeof exp == \"number\" && exp) {\n    let d = new Date()\n    d.setTime(d.getTime() + exp * 1000)\n    exp = props.expires = d\n  }\n  if (exp && exp.toUTCString) {\n    props.expires = exp.toUTCString()\n  }\n\n  value = encodeURIComponent(value)\n  let updatedCookie = name + \"=\" + value\n\n  for (let propName in props) {\n    updatedCookie += \"; \" + propName\n    let propValue = props[propName]\n    if (propValue !== true) {\n      updatedCookie += \"=\" + propValue\n    }\n  }\n\n  document.cookie = updatedCookie\n}\n\nexport {setCookie}","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nButton.propTypes = {\n  icon: PropTypes.string,\n  type: PropTypes.string,\n  text: PropTypes.string,\n  className: PropTypes.string,\n  classNameText: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool\n}\n\nexport default function Button({icon, type, text, onClick, className, disabled, classNameText}) {\n  const classes = [\n    'rounded-md px-2 py-1 m-2 place-content-center focus:outline-none '\n  ]\n\n  classes.push(className)\n\n  if (type === 'primary') {\n    classes.push('text-white bg-blue-500 bg-opacity-75 hover:bg-opacity-100')\n  } else if (type === 'success') {\n    classes.push('text-white bg-green-600')\n  } else if (type === 'secondary') {\n    classes.push('text-white bg-gray-600')\n  } else if (type === 'danger') {\n    classes.push('text-white bg-red-600')\n  } else if (type === 'warning') {\n    classes.push('text-white bg-yellow-600')\n  }\n\n  return (\n    <button className={classes.join(' ')} onClick={onClick} disabled={disabled}>\n      {icon ? <i className=\"material-icons mx-1 float-left\">{icon}</i> : ''}\n      <span className={\"my-auto \" + classNameText}>{text}</span>\n    </button>\n  )\n}","import {InitUser} from \"./actionsType\";\n\nexport function initUser(user) {\n  return {\n    type: InitUser,\n    user\n  }\n}","export const InitUser = 'InitUser'\nexport const LoginUser = 'LoginUser'","import React, {useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport workWithServer from \"../core/workWithServer\";\nimport Button from \"./Button\";\nimport {initUser} from \"../redux/actions/actions\";\nimport {connect} from \"react-redux\";\n\nfunction Login({initUser}) {\n  const [name, setName] = useState('');\n  const [validName, setValidName] = useState(true);\n  const [password, setPassword] = useState('');\n  const [validPassword, setValidPassword] = useState(true);\n\n  const login = (e) => {\n    e.preventDefault()\n    const validName = name.length > 0\n    const validPassword = password.length > 0\n    setValidName(validName)\n    setValidPassword(validPassword)\n\n    if (setValidName && validPassword) {\n      workWithServer.login({\n        \"username\": name,\n        \"password\": password\n      }).then((data) => {\n        data['error'] ? setValidName(false) :\n        initUser({...data, is_initial: true})\n      })\n        .catch(() => {setValidName(false)})\n    }\n\n  }\n  return (\n    <div className=\"mt-40\">\n      <p className=\"text-3xl mx-auto text-center\"> Пройдите авторизацию в системе</p>\n      <form className=\"pt-4 w-1/2 mx-auto\" onSubmit={login}>\n        <div className=\"mb-2\">\n          <label className=\"block mb-1\" htmlFor=\"name\">\n            Имя\n          </label>\n          <input\n            className=\"appearance-none border rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:border-blue-600\"\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Введите имя\"\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              setValidName(true)\n            }}\n          />\n          {!validName && <label className=\"text-xs text-red-400 pl-2\">Пользователя не существует</label>}\n        </div>\n\n        <div className=\"mb-2\">\n          <label className=\"block mb-1\" htmlFor=\"password\">\n            Пароль\n          </label>\n          <input\n            className=\"appearance-none border rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:border-blue-600\"\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"Введите пароль\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n              setValidPassword(true)\n            }}\n          />\n          {!validPassword && <label className=\"text-xs text-red-400 pl-2\">Некорректный пароль</label>}\n        </div>\n\n        <div className=\"mb-2 text-center\">\n          <Button text=\"Войти в аккаунт\" type=\"primary\"/>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initUser: user => dispatch(initUser(user))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Login)\nLogin.propTypes = {\n  loginUser: PropTypes.func,\n};\n","import React from \"react\";\nimport Button from \"./Button\";\nimport workWithServer from \"../core/workWithServer\";\nimport {initUser} from \"../redux/actions/actions\";\nimport {connect} from \"react-redux\";\n\nfunction Header({user, initUser, headerRef}) {\n\n  const logOut = () => {\n    workWithServer.logOut().then(() => initUser({...user, username: ''}))\n  };\n\n  return (\n    <>\n      <div ref={headerRef} className=\"p-3 border-b flex justify-between\">\n        <span className=\"my-auto p-2 border rounded border-blue-600\">{user.username} - {user.group}</span>\n        <Button className=\"\" type='primary' onClick={logOut} text=\"Выйти\"/>\n      </div>\n    </>\n  )\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initUser: user => dispatch(initUser(user))\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps )(Header)","import React, {createRef, useEffect, useState} from \"react\";\nimport Button from \"./Button\";\nimport DataTable from 'react-data-table-component';\nimport workWithServer from \"../core/workWithServer\";\n\nexport default function ListOfPerson({setShowBody}) {\n  const [toggleCleared, setToggleCleared] = useState(false);\n  const [idNewRow, setIdNewRow] = useState(-1);\n  const [listWithCity, setListWithCity] = useState([]);\n  const [listWithRank, setListWithRank] = useState([]);\n  const [listOfPerson, setListOfPerson] = useState([]);\n  let selectedRows = [];\n\n  let refIs_military = createRef();\n  let refRank_id = createRef();\n  let refName = createRef();\n  let refCity_id = createRef();\n  let refIs_woman_with_children = createRef();\n\n  useEffect(() => {\n    workWithServer.getListOfCity().then(setListWithCity);\n    workWithServer.getListOfPerson().then(setListOfPerson);\n    workWithServer.getListOfRank().then(setListWithRank);\n  }, []);\n\n  useEffect(() => {\n    listOfPerson.filter(el => el.is_editable).map(el => {\n      refIs_military.current.value = el.is_military.toString();\n      refRank_id.current.value =Number(el.rank_id);\n      refName.current.value = el.name;\n      refCity_id.current.value = Number(el.city_id);\n      refIs_woman_with_children.current.value = el.is_woman_with_children.toString()\n    })\n  }, [listOfPerson]);\n\n  const columns = [\n    {\n      name: 'Военнослужащий или гр. персонал',\n      selector: 'is_military',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ?\n          <select ref={refIs_military} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value={true}>Военнослужащий</option>\n            <option value={false}>Гр. персонал</option>\n          </select>\n          : <div>{row.is_military ? \"Военнослужащий\" : \"Гр. персонал\"}</div>;\n      },\n    },\n    {\n      name: 'Воинское звание',\n      selector: 'rank_id',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refRank_id} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value=\"\">Сбросить воинское звание</option>\n            {listWithRank.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listWithRank.filter(el => el.id === Number(row.rank_id))).map(el => el.name)}</div>;\n      },\n    },\n    {\n      name: 'ФИО',\n      selector: 'name',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <input ref={refName} className=\"w-full h-full border-b border-blue-700 bg-white\"/>\n          : <div>{row.name}</div>;\n      },\n    },\n    {\n      name: 'Город',\n      selector: 'city_id',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refCity_id} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            {listWithCity.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listWithCity.filter(el => el.id === Number(row.city_id))).map(el => el.name)}</div>;\n      },\n    },\n    {\n      name: 'Является ли женщиной с детьми до 14 лет?',\n      selector: 'is_woman_with_children',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refIs_woman_with_children} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value={true}>Да</option>\n            <option value={false}>Нет</option>\n          </select>\n          : <div>{row.is_woman_with_children ? \"Да\" : \"Нет\"}</div>;\n      },\n    },\n    {\n      name: 'Изменить',\n      selector: 'edit',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <Button type=\"warning\" text=\"Применить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              if (el.id === row.id) {\n                el.is_editable = false;\n                el.is_military = refIs_military.current.value === 'true';\n                el.rank_id = refRank_id.current.value;\n                el.name = refName.current.value;\n                el.city_id = refCity_id.current.value;\n                el.is_woman_with_children = refIs_woman_with_children.current.value === 'true'\n              }\n              return el\n            }))\n          }}/>\n          : <Button type=\"warning\" text=\"Изменить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              el.is_editable = el.id === row.id;\n              return el\n            }))\n          }}/>\n      },\n    },\n  ];\n\n  const selectedRow = (state) => {\n    selectedRows = state.selectedRows\n  };\n\n  const actions =\n    <Button className=\"text-base\" type=\"primary\" text=\"Добавить\" onClick={() => {\n      setListOfPerson([{\n        id: idNewRow,\n        is_military: true,\n        name: '',\n        is_woman_with_children: false,\n        is_editable: true\n      }, ...listOfPerson.map((el => {\n        el.is_editable = false;\n        return el\n      }))]);\n      setIdNewRow(prevState => prevState - 1)\n    }}/>;\n\n  const contextActions =\n    <Button className=\"text-base\" type=\"danger\" text=\"Удалить\" onClick={() => {\n      const idOfRows = selectedRows.map((el) => el.id);\n      setListOfPerson(listOfPerson.filter((el) => idOfRows.indexOf(el.id) === -1));\n      setToggleCleared(!toggleCleared)\n    }}/>;\n\n  return (\n    <div>\n      <div>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n        <Button className=\"\" type='success' text=\"Сохранить\" onClick={() => {\n          workWithServer.setListOfPerson({'data': listOfPerson}).then(() => setShowBody('nothing'))\n        }}/>\n      </div>\n      <DataTable\n        title=\"Управление личным составом центра\"\n        columns={columns}\n        selectableRows\n        data={listOfPerson}\n        pagination={true}\n        onSelectedRowsChange={selectedRow}\n        contextMessage={{singular: 'строка', plural: 'строк', message: ''}}\n        contextActions={contextActions}\n        actions={actions}\n        clearSelectedRows={toggleCleared}\n      />\n    </div>\n  )\n}\n\n","import React, {createRef, useEffect, useState} from \"react\";\nimport workWithServer from \"../core/workWithServer\";\nimport Button from \"./Button\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction MakeReport({setShowBody}) {\n  const [startDate, setStartDate] = useState(new Date());\n\n  const refStatus = createRef();\n  const refComment = createRef();\n\n  const [listStatus, setListStatus] = useState([]);\n  const [listOfPerson, setListOfPerson] = useState([]);\n\n  useEffect(() => {\n    workWithServer.getListOfPerson().then(setListOfPerson);\n    workWithServer.getListOfStatus().then(setListStatus);\n  }, []);\n\n  const columns = [\n    {\n      name: 'Воинское звание',\n      selector: 'rank_id__name',\n      sortable: true,\n    },\n    {\n      name: 'ФИО',\n      selector: 'name',\n      sortable: true,\n    },\n    {\n      name: 'Статус',\n      selector: ' status_id',\n      sortable: true,\n      cell: row => {\n        const elem = row.is_editable\n          ? <select ref={refStatus} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option key={-1} value=\"-1\">Сбросить статус</option>\n            {listStatus.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listStatus.filter(el => el.id === Number(row.status_id))).map(el => el.name)}</div>\n        if (row.is_editable && row.status_id) setTimeout(() => refStatus.current.value = row.status_id, 200)\n        return elem\n      },\n    },\n    {\n      name: 'Комментарий',\n      selector: 'comment',\n      sortable: true,\n      cell: row => {\n        const elem = row.is_editable\n          ? <input ref={refComment} className=\"w-full h-full border-b border-blue-700 bg-white\"/>\n          : <div>{row.comment}</div>;\n        if (row.is_editable) setTimeout(() => refComment.current.value = row.comment ? row.comment : '', 200)\n        return elem\n      },\n    },\n    {\n      name: 'Изменить',\n      selector: 'edit',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <Button type=\"warning\" text=\"Применить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              if (el.id === row.id) {\n                el.is_editable = false;\n                el.comment = refComment.current.value;\n                el.status_id = refStatus.current.value\n              }\n              return el\n            }))\n          }}/>\n          : <Button type=\"warning\" text=\"Изменить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              el.is_editable = el.id === row.id;\n              return el\n            }))\n          }}/>\n      },\n    },\n  ];\n\n  const actions =\n    <Button className=\"text-base\" type='warning' text=\"Создать\" onClick={() => {\n      workWithServer.setListOfReport({\n        'data': listOfPerson,\n        'date': startDate\n      }\n        ).then(() => setShowBody('nothing'))\n    }}/>;\n\n  return (\n    <div>\n      <div>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n\n        <Button className=\"\" type='primary' text=\"Использовать данные за:\" onClick={() => {\n          workWithServer.getListOfReport({'date': startDate}).then(data =>{\n            setListOfPerson(prevState => {\n              return [...prevState.map(el => {\n                let index = data.filter(obj => obj.userForControl_id === el.id);\n                if(index.length > 0) return {...el, ...index[0]};\n                delete el['comment'];\n                delete el['status_id'];\n                return el\n              })]\n            })\n          })\n        }}/>\n\n        <DatePicker\n          className=\"rounded border border-blue-700 p-1\"\n          selected={startDate}\n          onChange={date => setStartDate(date)}\n          dateFormat=\"dd-MM-yyyy\"\n        />\n      </div>\n      <DataTable\n        title={\"Сформировать отчет на \" + startDate.toLocaleString(\"ru\")}\n        columns={columns}\n        data={listOfPerson}\n        pagination={true}\n        contextMessage={{singular: 'строка', plural: 'строк', message: 'выбрано'}}\n        actions={actions}\n      />\n    </div>\n  )\n}\n\nexport default MakeReport","import React, {createRef, useEffect, useState} from \"react\";\nimport Button from \"./Button\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport workWithServer from \"../core/workWithServer\";\n\n\nfunction makeTableData(mass) {\n  return (\n    mass.length > 0\n      ? mass.map((el, index) => {\n        return (\n          <>\n            <span className=\"border p-1\">{index + 1}</span>\n            <span className=\"border p-1\">{el.group_id__name}</span>\n            <span className=\"border p-1\">{el.rank_id__name}</span>\n            <span className=\"border p-1\">{el.name}</span>\n            <span className=\"border p-1\"> {el.comment}</span>\n          </>\n        )\n      })\n      : <span className=\"col-span-5 text-center border p-1\"> Отсутствуют</span>\n  )\n}\n\nfunction SeeReport({setShowBody, headerRef}) {\n  const [startDate, setStartDate] = useState(new Date());\n  const printRef = createRef();\n\n  const [listOfPerson, setListOfPerson] = useState([]);\n  const [listOfCity, setListOfCity] = useState([]);\n\n  const getListOfReport = () => {\n    workWithServer.getListOfReport({'date': startDate}).then(data => {\n      setListOfPerson(prevState => prevState.map(el => {\n        let index = data.filter(obj => obj.userForControl_id === el.id);\n        if (index.length > 0) return {...el, ...index[0]};\n        delete el['comment'];\n        delete el['status_id'];\n        return el\n      }))\n    })\n  };\n\n  useEffect(() => {\n    workWithServer.getListOfPerson().then(data => {\n      setListOfPerson(data);\n      getListOfReport();\n    });\n    workWithServer.getListOfCity().then(setListOfCity);\n  }, []);\n\n  useEffect(() => {\n    getListOfReport();\n  }, [startDate]);\n\n  const onWorkAll = listOfPerson.filter(el => !el.status_id);\n  const onWorkMilitary = onWorkAll.filter(el => el.is_military);\n  const onWorkPeople = onWorkAll.filter(el => el.is_military === false);\n  const onWorkMilitaryWithChildren = onWorkMilitary.filter(el => el.is_woman_with_children);\n  const onWorkPeopleWithChildren = onWorkPeople.filter(el => el.is_woman_with_children);\n\n  let withDisease = listOfPerson.filter(el => !!el.status_id);\n\n  const withNoInfectionAmb = withDisease.filter(el => el.status_id__name === 'Неинфекционное заболевание, амбулаторно');\n  const withNoInfectionStat = withDisease.filter(el => el.status_id__name === 'Неинфекционное заболевание, стационарно');\n\n  const withPnevmoniaAmb = withDisease.filter(el => el.status_id__name === 'Пневмония, амбулаторно');\n  const withPnevmoniaStat = withDisease.filter(el => el.status_id__name === 'Пневмония, стационарно');\n\n  const withRespiratornoAmb = withDisease.filter(el => el.status_id__name === 'Респираторное заболевание, амбулаторно');\n  const withRespiratornoStat = withDisease.filter(el => el.status_id__name === 'Респираторное заболевание, стационарно');\n\n  const withKarantin = listOfPerson.filter(el => el.status_id__name === 'Карантин');\n\n  const withCovidAmb = withDisease.filter(el => el.status_id__name === 'Коронавирус, амбулаторно');\n  const withCovidStat = withDisease.filter(el => el.status_id__name === 'Коронавирус, стационарно');\n\n  withDisease = [...withNoInfectionAmb, ...withNoInfectionStat, ...withPnevmoniaAmb, ...withPnevmoniaStat,\n    ...withRespiratornoAmb, ...withRespiratornoStat, ...withKarantin, ...withCovidAmb, ...withCovidStat];\n\n  return (\n    <>\n      <div ref={printRef}>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n        <Button className=\"\" type='success' text=\"Распечатать\" onClick={() => {\n          printRef.current.classList.add('hidden');\n          headerRef.current.classList.add('hidden');\n          window.print();\n          printRef.current.classList.remove('hidden');\n          headerRef.current.classList.remove('hidden');\n        }}/>\n        <DatePicker\n          className=\"rounded border border-blue-700 p-1\"\n          selected={startDate}\n          onChange={setStartDate}\n          dateFormat=\"dd-MM-yyyy\"\n        />\n      </div>\n\n      <div className=\"m-4\">\n        <p className=\"text-center\">\n          СПРАВКА-ДОКЛАД <br/>\n          о состоянии дел в ФГКУ \"12 ЦНИИ\" Минобороны России <br/>\n          на {startDate.toLocaleString(\"ru\")}\n        </p>\n        <p className=\"font-bold\">\n          1. Находятся на службе:\n        </p>\n        <p>\n          Всего <b>{onWorkAll.length}</b>, в том числе: <br/>\n          военнослужащие - <b>{onWorkMilitary.length}</b> чел., из них женщин с детьми до 14 лет\n          - {onWorkMilitaryWithChildren.length} чел. <br/>\n          гражданские - <b>{onWorkPeople.length}</b> чел., из них женщин с детьми до 14 лет\n          - {onWorkPeopleWithChildren.length} чел.\n        </p>\n        <div className=\"grid grid-cols-3 mt-1 text-center\">\n          <span className=\"border p-1\"> ППД</span>\n          <span className=\"border p-1\"> Военнослужащих</span>\n          <span className=\"border p-1\"> Гр. персонала</span>\n          {listOfCity.map(el => {\n            return (\n              <>\n                <span className=\"border p-1\">{el.name}</span>\n                <span className=\"border p-1\"> {onWorkMilitary.filter(obj => obj.city_id === el.id).length}</span>\n                <span className=\"border p-1\">{onWorkPeople.filter(obj => obj.city_id === el.id).length}</span>\n              </>\n            )\n          })}\n        </div>\n        <p>\n          <b>2. Число заболевших:</b><br/>\n          Всего - <b>{withDisease.length}</b> <br/>\n          в том числе:\n        </p>\n        <p className=\"font-bold text-center \">\n          Не ОРВИ {withNoInfectionAmb.length + withNoInfectionStat.length} - чел\n          .\n          ({withNoInfectionAmb.filter(el => el.is_military).length + withNoInfectionAmb.filter(el => el.is_military).length} в/сл,\n          {withNoInfectionAmb.filter(el => !el.is_military).length + withNoInfectionAmb.filter(el => !el.is_military).length})\n        </p>\n        <div className=\"grid grid-cols-5 mt-1 text-center\">\n          <span className=\"border p-1\"> №</span>\n          <span className=\"border p-1\"> Подразделение</span>\n          <span className=\"border p-1\"> Воиское звание</span>\n          <span className=\"border p-1\"> Фамилия, иницалы</span>\n          <span className=\"border p-1\"> Диагноз</span>\n          <p className=\"col-span-5 font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withNoInfectionStat)}\n          <p className=\"col-span-5 font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withNoInfectionAmb)}\n        </div>\n        <p className=\"font-bold text-center mt-8\">\n          Пневмония {withPnevmoniaAmb.length + withPnevmoniaStat.length} - чел.\n        </p>\n        <div className=\"grid grid-cols-5 mt-1 text-center\">\n          <span className=\"border p-1\"> №</span>\n          <span className=\"border p-1\"> Подразделение</span>\n          <span className=\"border p-1\"> Воиское звание</span>\n          <span className=\"border p-1\"> Фамилия, иницалы</span>\n          <span className=\"border p-1\"> Диагноз</span>\n          <p className=\"col-span-5 font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withPnevmoniaStat)}\n          <p className=\"col-span-5 font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withPnevmoniaAmb)}\n        </div>\n        <p className=\"font-bold text-center mt-8\">\n          Острые респираторные вирусные инфекции (не коронавирусная\n          инфекция) {withRespiratornoStat.length + withRespiratornoAmb.length} - чел.\n        </p>\n        <div className=\"grid grid-cols-5 mt-1 text-center\">\n          <span className=\"border p-1\"> №</span>\n          <span className=\"border p-1\"> Подразделение</span>\n          <span className=\"border p-1\"> Воиское звание</span>\n          <span className=\"border p-1\"> Фамилия, иницалы</span>\n          <span className=\"border p-1\"> Диагноз</span>\n          <p className=\"col-span-5 font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withRespiratornoStat)}\n          <p className=\"col-span-5 font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withRespiratornoAmb)}\n        </div>\n        <p className=\"text-center mt-8\">\n          <b>Число находящихся на карантине (изоляция):</b><br/>\n          Всего - <b>{withKarantin.length}</b>, в том числе:<br/>\n          военнослужащие - <b>{withKarantin.filter(el => el.is_military).length}</b> чел.;\n          гр. персонал - <b>{withKarantin.filter(el => !el.is_military).length}</b> чел.\n        </p>\n        <div className=\"grid grid-cols-5 mt-1 text-center\">\n          <span className=\"border p-1\"> №</span>\n          <span className=\"border p-1\"> Подразделение</span>\n          <span className=\"border p-1\"> Воиское звание</span>\n          <span className=\"border p-1\"> Фамилия и иницалы</span>\n          <span className=\"border p-1\"> Причина</span>\n          {makeTableData(withKarantin)}\n        </div>\n        <p className=\"font-bold text-center mt-8\">\n          Коронавирусная инфекция - {withCovidAmb.length + withCovidStat.length} чел.\n        </p>\n        <div className=\"grid grid-cols-5 mt-1 text-center\">\n          <span className=\"border p-1\"> №</span>\n          <span className=\"border p-1\"> Подразделение</span>\n          <span className=\"border p-1\"> Воиское звание</span>\n          <span className=\"border p-1\"> Фамилия и иницалы</span>\n          <span className=\"border p-1\"> Причина</span>\n          <p className=\"col-span-5 font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withCovidStat)}\n          <p className=\"col-span-5 font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withCovidAmb)}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default SeeReport","import React, {createRef, useEffect, useState} from 'react'\r\nimport Button from \"./Button\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport workWithServer from \"../core/workWithServer\";\r\n\r\nfunction ListForEntering({headerRef, setShowBody}) {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const printRef = createRef();\r\n\r\n  const [listOfPerson, setListOfPerson] = useState([]);\r\n  const [listOfGroup, setListOfGroup] = useState([]);\r\n\r\n  const getListOfReport = () => {\r\n    workWithServer.getListOfReport({'date': startDate}).then(data => {\r\n      setListOfPerson(prevState => prevState.map(el => {\r\n        let index = data.filter(obj => obj.userForControl_id === el.id);\r\n        if (index.length > 0) return {...el, ...index[0]};\r\n        delete el['comment'];\r\n        delete el['status_id'];\r\n        return el\r\n      }))\r\n    })\r\n  };\r\n\r\n  useEffect(() => {\r\n    workWithServer.getListOfGroup().then(setListOfGroup);\r\n    workWithServer.getListOfPerson().then(data => {\r\n      setListOfPerson(data);\r\n      getListOfReport();\r\n    });\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getListOfReport();\r\n  }, [startDate]);\r\n\r\n  const onWorkAll = listOfPerson.filter(el => !el.status_id);\r\n\r\n  return (\r\n    <>\r\n      <div ref={printRef}>\r\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\r\n          setShowBody('nothing')\r\n        }}/>\r\n        <Button className=\"\" type='success' text=\"Распечатать\" onClick={() => {\r\n          printRef.current.classList.add('hidden');\r\n          headerRef.current.classList.add('hidden');\r\n          window.print();\r\n          printRef.current.classList.remove('hidden');\r\n          headerRef.current.classList.remove('hidden');\r\n        }}/>\r\n        <DatePicker\r\n          className=\"rounded border border-blue-700 p-1\"\r\n          selected={startDate}\r\n          onChange={date => setStartDate(date)}\r\n          dateFormat=\"dd-MM-yyyy\"\r\n        />\r\n      </div>\r\n      <p className=\"font-bold m-2 text-center text-2xl\">Списки на проход на {startDate.toLocaleDateString('ru')}</p>\r\n      {listOfGroup.map(group => {\r\n        const byGroup = onWorkAll.filter(person => person.group_id === group.id);\r\n        return (\r\n          <>\r\n            {byGroup.length > 0\r\n              ?\r\n              <div style={{pageBreakAfter: 'always'}}>\r\n                <p className=\"mt-2 text-center font-semibold text-2xl border p-1\">{group.name}</p>\r\n                <div className=\"grid grid-cols-4 text-center\">\r\n                  <span className=\"border p-1\">№</span>\r\n                  <span className=\"border p-1\">Воиское звание</span>\r\n                  <span className=\"border p-1\">Фамилия, иницалы</span>\r\n                  <span className=\"border p-1\">Примечание (время прохода)</span>\r\n                  {byGroup.map((el, index) => {\r\n                    return (\r\n                      <>\r\n                        <span className=\"border p-1\">{index + 1}</span>\r\n                        <span className=\"border p-1\">{el.rank_id__name}</span>\r\n                        <span className=\"border p-1\">{el.name}</span>\r\n                        <span className=\"border p-1\"> {el.comment}</span>\r\n                      </>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n              : <></>\r\n            }\r\n          </>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ListForEntering","import React, {createRef, useState} from \"react\";\nimport Button from \"./Button\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport ListOfPerson from \"./ListOfPerson\";\nimport MakeReport from \"./MakeReport\";\nimport SeeReport from \"./SeeReport\";\nimport ListForEntering from \"./ListForEntering\";\n\n\nfunction Home({user}) {\n  const [showBody, setShowBody] = useState('nothing');\n  const headerRef = createRef();\n\n  const mainButton = (\n    <div>\n      <Button className=\"\" type='primary' text=\"Управление л/с\" onClick={() => {\n        setShowBody('listOfPerson')\n      }}/>\n      <Button className=\"\" type='primary' text=\"Сформировать отчет\" onClick={() => {\n        setShowBody('makeReport')\n      }}/>\n    </div>\n  );\n\n  const bodyForCentre = () => {\n    switch (showBody) {\n      case 'listOfPerson':\n        return (<ListOfPerson setShowBody={setShowBody}/>);\n      case 'makeReport':\n        return (<MakeReport setShowBody={setShowBody}/>);\n      default:\n        return (mainButton)\n    }\n  };\n\n  const mainButtonForControl = (\n    <div>\n      <Button className=\"\" type='primary' text=\"Списки на проход\" onClick={() => {\n        setShowBody('listForEntering')\n      }}/>\n      <Button className=\"\" type='primary' text=\"Справка доклад\" onClick={() => {\n        setShowBody('report')\n      }}/>\n    </div>\n  );\n\n  const bodyForControl = () => {\n    switch (showBody) {\n      case 'listForEntering':\n        return (<ListForEntering headerRef={headerRef} setShowBody={setShowBody}/>);\n      case 'report':\n        return (<SeeReport headerRef={headerRef} setShowBody={setShowBody}/>);\n      default:\n        return (mainButtonForControl)\n    }\n  };\n\n  return (\n    <>\n      <Header headerRef={headerRef}/>\n      <div className=\"px-2\">\n        {user['is_control']\n          ? bodyForControl()\n          : bodyForCentre()\n\n        }\n      </div>\n    </>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  }\n}\nexport default connect(mapStateToProps)(Home)","import React, {useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport workWithServer from \"./core/workWithServer\";\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport {initUser} from \"./redux/actions/actions\";\n\nfunction App({user, initUser}) {\n\tuseEffect(() => {\n\t\t\tworkWithServer.initUser()\n\t\t\t\t.then(data => {\n\t\t\t\t\tinitUser({...data, is_initial: true})\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tinitUser({...user, is_initial: true})\n\t\t\t\t})\n\t\t}, []\n\t)\n\n\treturn (\n\t\tuser.is_initial\n\t\t\t? (\n\t\t\t\tuser.username\n\t\t\t\t\t? <Home/>\n\t\t\t\t\t: <Login/>\n\t\t\t)\n\t\t\t: <span>Loading</span>\n\t)\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tuser: state.user,\n\t}\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\t\tinitUser: user => dispatch(initUser(user))\n\t}\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\nApp.propTypes = {\n\tuser: PropTypes.object,\n\tinitUser: PropTypes.func,\n};\n","import {InitUser} from \"../actions/actionsType\";\n\nconst initialState = {\n  username: '',\n  is_initial: false,\n}\n\nexport default function user(state = initialState, action) {\n  switch (action.type) {\n    case InitUser:\n      return {\n        ...state,\n        ...action.user,\n      }\n    default:\n      return state\n  }\n}","import {combineReducers} from 'redux'\nimport user from \"./reducers/user\";\n\nexport default combineReducers({\n  user,\n})","// @ts-ignore\nimport React from 'react';\n// @ts-ignore\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './tailwind.output.css';\n// @ts-ignore\nimport {BrowserRouter} from 'react-router-dom'\n\nimport {createStore} from 'redux'\n// @ts-ignore\nimport {Provider} from 'react-redux'\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App/>\n\t\t\t</BrowserRouter>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}