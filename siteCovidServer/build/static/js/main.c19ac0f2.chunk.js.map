{"version":3,"sources":["core/workWithServer.js","components/Button.js","redux/actions/actions.js","redux/actions/actionsType.js","components/Login.js","components/Header.js","components/ListOfPerson.js","components/MakeReport.js","components/SeeReport.js","components/ListForEntering.js","components/Loader.js","components/Home.js","App.js","redux/reducers/user.js","redux/rootReducer.js","index.js"],"names":["workWithServer","initUser","requestPost","login","data","logOut","getListOfCity","getListOfPerson","setListOfPerson","getListOfStatus","setListOfReport","getListOfReport","getListOfRank","getListOfGroup","status","response","Promise","resolve","json","reject","Error","statusText","request","url","body","a","trackPromise","fetch","then","headers","csrfmiddlewaretoken","getCookie","credentials","method","mode","JSON","stringify","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","undefined","Button","icon","type","text","onClick","className","disabled","classNameText","classes","push","join","InputForDatePicker","props","value","readOnly","user","connect","dispatch","useState","setName","validName","setValidName","password","setPassword","validPassword","setValidPassword","onSubmit","e","preventDefault","length","is_initial","catch","htmlFor","id","placeholder","onChange","target","state","headerRef","ref","username","group","ListOfPerson","setShowBody","toggleCleared","setToggleCleared","idNewRow","setIdNewRow","listWithCity","setListWithCity","listWithRank","setListWithRank","listOfPerson","selectedRows","refIs_military","createRef","refRank_id","refName","refCity_id","refIs_woman_with_children","useEffect","filter","el","is_editable","map","current","is_military","toString","Number","rank_id","city_id","is_woman_with_children","columns","selector","sortable","cell","row","index","key","prev","actions","prevState","contextActions","idOfRows","indexOf","title","selectableRows","pagination","onSelectedRowsChange","contextMessage","singular","plural","message","clearSelectedRows","paginationComponentOptions","rowsPerPageText","rangeSeparatorText","noRowsPerPage","selectAllRowsItem","selectAllRowsItemText","MakeReport","Date","startDate","setStartDate","refStatus","refComment","listStatus","setListStatus","dataByday","obj","userForControl_id","elem","status_id","setTimeout","comment","selected","date","dateFormat","customInput","toLocaleString","makeTableData","mass","group_id__name","rank_id__name","SeeReport","printRef","listOfCity","setListOfCity","onWorkAll","onWorkMilitary","onWorkPeople","onWorkMilitaryWithChildren","onWorkPeopleWithChildren","withDisease","withNoInfectionAmb","status_id__name","withNoInfectionStat","withPnevmoniaAmb","withPnevmoniaStat","withRespiratornoAmb","withRespiratornoStat","withKarantin","withCovidAmb","withCovidStat","classList","add","window","print","remove","ListForEntering","listOfGroup","setListOfGroup","toLocaleDateString","byGroup","person","group_id","massOdd","_","massEven","style","pageBreakAfter","oddElem","Loader","usePromiseTracker","promiseInProgress","showBody","mainButton","mainButtonForControl","bodyForControl","bodyForCentre","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c19ac0f2.chunk.js","sourcesContent":["import {trackPromise} from \"react-promise-tracker\";\n\nconst workWithServer = () => {\n  return {\n    initUser: () => {\n      return requestPost('/initUser/')\n    },\n    login: (data) => {\n      return requestPost('/login/', data)\n    },\n    logOut: () => {\n      return requestPost('/logout/',)\n    },\n    getListOfCity: () => {\n      return requestPost('/getListOfCity/',)\n    },\n    getListOfPerson: () => {\n      return requestPost('/getListOfPerson/',)\n    },\n    setListOfPerson: (data) => {\n      return requestPost('/setListOfPerson/', data)\n    },\n    getListOfStatus: () => {\n      return requestPost('/getListOfStatus/')\n    },\n    setListOfReport: (data) => {\n      return requestPost('/setListOfReport/', data)\n    },\n    getListOfReport: (data) => {\n      return requestPost('/getListOfReport/', data)\n    },\n    getListOfRank: (data) => {\n      return requestPost('/getListOfRank/', data)\n    },\n    getListOfGroup: (data) => {\n      return requestPost('/getListOfGroup/', data)\n    },\n  }\n};\n\nexport default workWithServer()\n\nfunction status(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response.json())\n  } else {\n    return Promise.reject(new Error(response.statusText))\n  }\n}\n\nasync function request(url, body) {\n  return await trackPromise(fetch(url, body).then(status));\n}\n\nasync function requestPost(url, data) {\n  const headers = {\n    'Accept': 'application/json, text/plain, */*',\n    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    'X-Requested-With': 'XMLHttpRequest',\n  };\n  let csrfmiddlewaretoken = getCookie('csrftoken');\n  csrfmiddlewaretoken && (headers['X-CSRFToken'] = csrfmiddlewaretoken);\n  return await request(url, {\n    credentials: 'include',\n    method: 'POST',\n    mode: 'same-origin',\n    headers: headers,\n    body: JSON.stringify(data)\n  })\n}\n\nfunction getCookie(name) {\n  let matches = document.cookie.match(new RegExp(\n    \"(?:^|; )\" + name.replace(/([.$?*|{}()[]\\/+^])/g, '\\\\$1') + \"=([^;]*)\"\n  ))\n  return matches ? decodeURIComponent(matches[1]) : undefined\n}\n\nconst setCookie = (name, value, props = {'Path': '/', maxAge: 1800}) => {\n  let exp = props.expires\n  if (typeof exp == \"number\" && exp) {\n    let d = new Date()\n    d.setTime(d.getTime() + exp * 1000)\n    exp = props.expires = d\n  }\n  if (exp && exp.toUTCString) {\n    props.expires = exp.toUTCString()\n  }\n\n  value = encodeURIComponent(value)\n  let updatedCookie = name + \"=\" + value\n\n  for (let propName in props) {\n    updatedCookie += \"; \" + propName\n    let propValue = props[propName]\n    if (propValue !== true) {\n      updatedCookie += \"=\" + propValue\n    }\n  }\n\n  document.cookie = updatedCookie\n}\n\nexport {setCookie}","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nButton.propTypes = {\n  icon: PropTypes.string,\n  type: PropTypes.string,\n  text: PropTypes.string,\n  className: PropTypes.string,\n  classNameText: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool\n}\n\nexport default function Button({icon, type, text, onClick, className, disabled, classNameText}) {\n  const classes = [\n    'rounded-md px-2 py-1 m-2 place-content-center focus:outline-none '\n  ];\n\n  classes.push(className);\n\n  if (type === 'primary') {\n    classes.push('text-white bg-blue-500 bg-opacity-75 hover:bg-opacity-100')\n  } else if (type === 'success') {\n    classes.push('text-white bg-green-600')\n  } else if (type === 'secondary') {\n    classes.push('text-white bg-gray-600')\n  } else if (type === 'danger') {\n    classes.push('text-white bg-red-600')\n  } else if (type === 'warning') {\n    classes.push('text-white bg-yellow-600')\n  }\n\n  return (\n    <button className={classes.join(' ')} onClick={onClick} disabled={disabled}>\n      {icon ? <i className=\"material-icons mx-1 float-left\">{icon}</i> : ''}\n      <span className={\"my-auto \" + classNameText}>{text}</span>\n    </button>\n  )\n}\n\n\nconst InputForDatePicker = (props) => {\n  return (\n    <input\n      className=\"rounded border border-blue-700 p-1\"\n      onClick={props.onClick}\n      value={props.value}\n      type=\"text\"\n      readOnly={true}\n    />\n  )\n};\n\nexport {\n  InputForDatePicker\n}","import {InitUser} from \"./actionsType\";\n\nexport function initUser(user) {\n  return {\n    type: InitUser,\n    user\n  }\n}","export const InitUser = 'InitUser'\nexport const LoginUser = 'LoginUser'","import React, {useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport workWithServer from \"../core/workWithServer\";\nimport Button from \"./Button\";\nimport {initUser} from \"../redux/actions/actions\";\nimport {connect} from \"react-redux\";\n\nfunction Login({initUser}) {\n  const [name, setName] = useState('');\n  const [validName, setValidName] = useState(true);\n  const [password, setPassword] = useState('');\n  const [validPassword, setValidPassword] = useState(true);\n\n  const login = (e) => {\n    e.preventDefault()\n    const validName = name.length > 0\n    const validPassword = password.length > 0\n    setValidName(validName)\n    setValidPassword(validPassword)\n\n    if (setValidName && validPassword) {\n      workWithServer.login({\n        \"username\": name,\n        \"password\": password\n      }).then((data) => {\n        data['error'] ? setValidName(false) :\n        initUser({...data, is_initial: true})\n      })\n        .catch(() => {setValidName(false)})\n    }\n\n  }\n  return (\n    <div className=\"mt-40\">\n      <p className=\"text-3xl mx-auto text-center\"> Пройдите авторизацию в системе</p>\n      <form className=\"pt-4 w-1/2 mx-auto\" onSubmit={login}>\n        <div className=\"mb-2\">\n          <label className=\"block mb-1\" htmlFor=\"name\">\n            Имя\n          </label>\n          <input\n            className=\"appearance-none border rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:border-blue-600\"\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Введите имя\"\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              setValidName(true)\n            }}\n          />\n          {!validName && <label className=\"text-xs text-red-400 pl-2\">Пользователя не существует</label>}\n        </div>\n\n        <div className=\"mb-2\">\n          <label className=\"block mb-1\" htmlFor=\"password\">\n            Пароль\n          </label>\n          <input\n            className=\"appearance-none border rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:border-blue-600\"\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"Введите пароль\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n              setValidPassword(true)\n            }}\n          />\n          {!validPassword && <label className=\"text-xs text-red-400 pl-2\">Некорректный пароль</label>}\n        </div>\n\n        <div className=\"mb-2 text-center\">\n          <Button text=\"Войти в аккаунт\" type=\"primary\"/>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initUser: user => dispatch(initUser(user))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Login)\nLogin.propTypes = {\n  loginUser: PropTypes.func,\n};\n","import React from \"react\";\nimport Button from \"./Button\";\nimport workWithServer from \"../core/workWithServer\";\nimport {initUser} from \"../redux/actions/actions\";\nimport {connect} from \"react-redux\";\n\nfunction Header({user, initUser, headerRef}) {\n\n  const logOut = () => {\n    workWithServer.logOut().then(() => initUser({...user, username: ''}))\n  };\n\n  return (\n    <>\n      <div ref={headerRef} className=\"p-3 border-b flex justify-between\">\n        <span className=\"my-auto p-2 border rounded border-blue-600\">{user.username} - {user.group}</span>\n        <Button className=\"\" type='primary' onClick={logOut} text=\"Выйти\"/>\n      </div>\n    </>\n  )\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initUser: user => dispatch(initUser(user))\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps )(Header)","import React, {createRef, useEffect, useState} from \"react\";\nimport Button from \"./Button\";\nimport DataTable from 'react-data-table-component';\nimport workWithServer from \"../core/workWithServer\";\n\nexport default function ListOfPerson({setShowBody}) {\n  const [toggleCleared, setToggleCleared] = useState(false);\n  const [idNewRow, setIdNewRow] = useState(-1);\n  const [listWithCity, setListWithCity] = useState([]);\n  const [listWithRank, setListWithRank] = useState([]);\n  const [listOfPerson, setListOfPerson] = useState([]);\n  let selectedRows = [];\n\n  let refIs_military = createRef();\n  let refRank_id = createRef();\n  let refName = createRef();\n  let refCity_id = createRef();\n  let refIs_woman_with_children = createRef();\n\n  useEffect(() => {\n    workWithServer.getListOfCity().then(setListWithCity);\n    workWithServer.getListOfPerson().then(setListOfPerson);\n    workWithServer.getListOfRank().then(setListWithRank);\n  }, []);\n\n  useEffect(() => {\n    listOfPerson.filter(el => el.is_editable).map(el => {\n      refIs_military.current.value = el.is_military.toString();\n      refRank_id.current.value =Number(el.rank_id);\n      refName.current.value = el.name;\n      refCity_id.current.value = Number(el.city_id);\n      refIs_woman_with_children.current.value = el.is_woman_with_children.toString()\n    })\n  }, [listOfPerson]);\n\n  const columns = [\n    {\n      name: '№',\n      selector: 'id',\n      sortable: true,\n      cell: (row, index) => {\n        return <div>{index + 1}</div>;\n      },\n    },\n    {\n      name: 'Военнослужащий или гр. персонал',\n      selector: 'is_military',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ?\n          <select ref={refIs_military} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value={true}>Военнослужащий</option>\n            <option value={false}>Гр. персонал</option>\n          </select>\n          : <div>{row.is_military ? \"Военнослужащий\" : \"Гр. персонал\"}</div>;\n      },\n    },\n    {\n      name: 'Воинское звание',\n      selector: 'rank_id',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refRank_id} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value=\"\">Сбросить воинское звание</option>\n            {listWithRank.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listWithRank.filter(el => el.id === Number(row.rank_id))).map(el => el.name)}</div>;\n      },\n    },\n    {\n      name: 'ФИО',\n      selector: 'name',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <input ref={refName} className=\"w-full h-full border-b border-blue-700 bg-white\"/>\n          : <div>{row.name}</div>;\n      },\n    },\n    {\n      name: 'Город',\n      selector: 'city_id',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refCity_id} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            {listWithCity.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listWithCity.filter(el => el.id === Number(row.city_id))).map(el => el.name)}</div>;\n      },\n    },\n    {\n      name: 'Является ли женщиной с детьми до 14 лет?',\n      selector: 'is_woman_with_children',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <select ref={refIs_woman_with_children} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option value={true}>Да</option>\n            <option value={false}>Нет</option>\n          </select>\n          : <div>{row.is_woman_with_children ? \"Да\" : \"Нет\"}</div>;\n      },\n    },\n    {\n      name: 'Изменить',\n      selector: 'edit',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <Button type=\"warning\" text=\"Применить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              if (el.id === row.id) {\n                el.is_editable = false;\n                el.is_military = refIs_military.current.value === 'true';\n                el.rank_id = refRank_id.current.value;\n                el.name = refName.current.value;\n                el.city_id = refCity_id.current.value;\n                el.is_woman_with_children = refIs_woman_with_children.current.value === 'true'\n              }\n              return el\n            }))\n          }}/>\n          : <Button type=\"warning\" text=\"Изменить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              el.is_editable = el.id === row.id;\n              return el\n            }))\n          }}/>\n      },\n    },\n  ];\n\n  const selectedRow = (state) => {\n    selectedRows = state.selectedRows\n  };\n\n  const actions =\n    <Button className=\"text-base\" type=\"primary\" text=\"Добавить\" onClick={() => {\n      setListOfPerson([{\n        id: idNewRow,\n        is_military: true,\n        name: '',\n        is_woman_with_children: false,\n        is_editable: true\n      }, ...listOfPerson.map((el => {\n        el.is_editable = false;\n        return el\n      }))]);\n      setIdNewRow(prevState => prevState - 1)\n    }}/>;\n\n  const contextActions =\n    <Button className=\"text-base\" type=\"danger\" text=\"Удалить\" onClick={() => {\n      const idOfRows = selectedRows.map((el) => el.id);\n      setListOfPerson(listOfPerson.filter((el) => idOfRows.indexOf(el.id) === -1));\n      setToggleCleared(!toggleCleared)\n    }}/>;\n\n  return (\n    <div>\n      <div>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n        <Button className=\"\" type='success' text=\"Сохранить\" onClick={() => {\n          workWithServer.setListOfPerson({'data': listOfPerson}).then(() => setShowBody('nothing'))\n        }}/>\n      </div>\n      <DataTable\n        title=\"Управление личным составом центра\"\n        columns={columns}\n        selectableRows\n        data={listOfPerson}\n        pagination={true}\n        onSelectedRowsChange={selectedRow}\n        contextMessage={{singular: 'строка', plural: 'строк', message: ''}}\n        contextActions={contextActions}\n        actions={actions}\n        clearSelectedRows={toggleCleared}\n        paginationComponentOptions = {{\n          rowsPerPageText: 'Строк на странице:',\n          rangeSeparatorText: 'из',\n          noRowsPerPage: false,\n          selectAllRowsItem: false,\n          selectAllRowsItemText: 'Все'\n        }}\n      />\n    </div>\n  )\n}\n\n","import React, {createRef, useEffect, useState} from \"react\";\nimport workWithServer from \"../core/workWithServer\";\nimport Button, {InputForDatePicker} from \"./Button\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction MakeReport({setShowBody}) {\n  const [startDate, setStartDate] = useState(new Date());\n\n  const refStatus = createRef();\n  const refComment = createRef();\n\n  const [listStatus, setListStatus] = useState([]);\n  const [listOfPerson, setListOfPerson] = useState([]);\n\n  const dataByday = () => {\n    workWithServer.getListOfReport({'date': startDate}).then(data => {\n      setListOfPerson(prevState => {\n        return [...prevState.map(el => {\n          let index = data.filter(obj => obj.userForControl_id === el.id);\n          if (index.length > 0) return {...el, ...index[0]};\n          delete el['comment'];\n          delete el['status_id'];\n          return el\n        })]\n      })\n    })\n  };\n\n  useEffect(() => {\n    workWithServer.getListOfPerson().then((data) => {\n      setListOfPerson(data);\n      dataByday();\n    });\n    workWithServer.getListOfStatus().then(setListStatus);\n  }, []);\n\n  const columns = [\n    {\n      name: '№',\n      selector: 'id',\n      sortable: true,\n      cell: (row, index) => {\n        return <div>{index + 1}</div>;\n      },\n    },\n    {\n      name: 'Воинское звание',\n      selector: 'rank_id__name',\n      sortable: true,\n    },\n    {\n      name: 'ФИО',\n      selector: 'name',\n      sortable: true,\n    },\n    {\n      name: 'Статус',\n      selector: ' status_id',\n      sortable: true,\n      cell: row => {\n        const elem = row.is_editable\n          ? <select ref={refStatus} className=\"w-full h-full border-b border-blue-700 bg-white\">\n            <option key={-1} value=\"-1\">Сбросить статус</option>\n            {listStatus.map(el => <option key={el.id} value={el.id}>{el.name}</option>)}\n          </select>\n          : <div>{(listStatus.filter(el => el.id === Number(row.status_id))).map(el => el.name)}</div>\n        if (row.is_editable && row.status_id) setTimeout(() => refStatus.current.value = row.status_id, 200)\n        return elem\n      },\n    },\n    {\n      name: 'Комментарий',\n      selector: 'comment',\n      sortable: true,\n      cell: row => {\n        const elem = row.is_editable\n          ? <input ref={refComment} className=\"w-full h-full border-b border-blue-700 bg-white\"/>\n          : <div>{row.comment}</div>;\n        if (row.is_editable) setTimeout(() => refComment.current.value = row.comment ? row.comment : '', 200)\n        return elem\n      },\n    },\n    {\n      name: 'Изменить',\n      selector: 'edit',\n      sortable: true,\n      cell: row => {\n        return row.is_editable\n          ? <Button type=\"warning\" text=\"Применить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              if (el.id === row.id) {\n                el.is_editable = false;\n                el.comment = refComment.current.value;\n                el.status_id = refStatus.current.value\n              }\n              return el\n            }))\n          }}/>\n          : <Button type=\"warning\" text=\"Изменить\" onClick={() => {\n            setListOfPerson(prev => prev.map(el => {\n              el.is_editable = el.id === row.id;\n              return el\n            }))\n          }}/>\n      },\n    },\n  ];\n\n\n  return (\n    <div>\n      <div>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n        <Button className=\"text-base\" type='success' text=\"Сохранить\" onClick={() => {\n          workWithServer.setListOfReport({\n              'data': listOfPerson,\n              'date': startDate\n            }\n          ).then(() => setShowBody('nothing'))\n        }}/>\n\n        <Button className=\"\" type='primary' text=\"Использовать данные за:\" onClick={() => {\n          dataByday();\n        }}/>\n\n        <DatePicker\n          className=\"rounded border border-blue-700 p-1\"\n          selected={startDate}\n          onChange={date => setStartDate(date)}\n          dateFormat=\"dd.MM.yyyy\"\n          customInput={<InputForDatePicker/>}\n        />\n      </div>\n      <DataTable\n        title={\"Сформировать отчет на \" + startDate.toLocaleString(\"ru\")}\n        columns={columns}\n        data={listOfPerson}\n        pagination={true}\n        contextMessage={{singular: 'строка', plural: 'строк', message: 'выбрано'}}\n        paginationComponentOptions = {{\n          rowsPerPageText: 'Строк на странице:',\n          rangeSeparatorText: 'из',\n          noRowsPerPage: false,\n          selectAllRowsItem: false,\n          selectAllRowsItemText: 'Все'\n        }}\n      />\n    </div>\n  )\n}\n\nexport default MakeReport\n","import React, {createRef, useEffect, useState} from \"react\";\nimport Button, {InputForDatePicker} from \"./Button\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport workWithServer from \"../core/workWithServer\";\n\n\nfunction makeTableData(mass) {\n  return (\n    mass.length > 0\n      ? mass.map((el, index) => {\n        return (\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\">{index + 1}</p>\n            <p className=\"border p-1 inline-block w-1/5\">{el.group_id__name}</p>\n            <p className=\"border p-1 inline-block w-1/5\">{el.rank_id__name}</p>\n            <p className=\"border p-1 inline-block w-1/5\">{el.name}</p>\n            <p className=\"border p-1 inline-block w-1/5\"> {el.comment}</p>\n          </div>\n        )\n      })\n      : <p className=\"text-center border p-1\"> Отсутствуют</p>\n  )\n}\n\nfunction SeeReport({setShowBody, headerRef}) {\n  const [startDate, setStartDate] = useState(new Date());\n  const printRef = createRef();\n\n  const [listOfPerson, setListOfPerson] = useState([]);\n  const [listOfCity, setListOfCity] = useState([]);\n\n  const getListOfReport = () => {\n    workWithServer.getListOfReport({'date': startDate}).then(data => {\n      setListOfPerson(prevState => prevState.map(el => {\n        let index = data.filter(obj => obj.userForControl_id === el.id);\n        if (index.length > 0) return {...el, ...index[0]};\n        delete el['comment'];\n        delete el['status_id'];\n        return el\n      }))\n    })\n  };\n\n  useEffect(() => {\n    workWithServer.getListOfPerson().then(data => {\n      setListOfPerson(data);\n      getListOfReport();\n    });\n    workWithServer.getListOfCity().then(setListOfCity);\n  }, []);\n\n  useEffect(() => {\n    getListOfReport();\n  }, [startDate]);\n\n  const onWorkAll = listOfPerson.filter(el => !el.status_id);\n  const onWorkMilitary = onWorkAll.filter(el => el.is_military);\n  const onWorkPeople = onWorkAll.filter(el => el.is_military === false);\n  const onWorkMilitaryWithChildren = onWorkMilitary.filter(el => el.is_woman_with_children);\n  const onWorkPeopleWithChildren = onWorkPeople.filter(el => el.is_woman_with_children);\n\n  let withDisease = listOfPerson.filter(el => !!el.status_id);\n\n  const withNoInfectionAmb = withDisease.filter(el => el.status_id__name === 'Неинфекционное заболевание, амбулаторно');\n  const withNoInfectionStat = withDisease.filter(el => el.status_id__name === 'Неинфекционное заболевание, стационарно');\n\n  const withPnevmoniaAmb = withDisease.filter(el => el.status_id__name === 'Пневмония, амбулаторно');\n  const withPnevmoniaStat = withDisease.filter(el => el.status_id__name === 'Пневмония, стационарно');\n\n  const withRespiratornoAmb = withDisease.filter(el => el.status_id__name === 'Респираторное заболевание, амбулаторно');\n  const withRespiratornoStat = withDisease.filter(el => el.status_id__name === 'Респираторное заболевание, стационарно');\n\n  const withKarantin = listOfPerson.filter(el => el.status_id__name === 'Карантин');\n\n  const withCovidAmb = withDisease.filter(el => el.status_id__name === 'Коронавирус, амбулаторно');\n  const withCovidStat = withDisease.filter(el => el.status_id__name === 'Коронавирус, стационарно');\n\n  withDisease = [...withNoInfectionAmb, ...withNoInfectionStat, ...withPnevmoniaAmb, ...withPnevmoniaStat,\n    ...withRespiratornoAmb, ...withRespiratornoStat, ...withKarantin, ...withCovidAmb, ...withCovidStat];\n\n  return (\n    <>\n      <div ref={printRef}>\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\n          setShowBody('nothing')\n        }}/>\n        <Button className=\"\" type='success' text=\"Распечатать\" onClick={() => {\n          printRef.current.classList.add('hidden');\n          headerRef.current.classList.add('hidden');\n          window.print();\n          printRef.current.classList.remove('hidden');\n          headerRef.current.classList.remove('hidden');\n        }}/>\n        <DatePicker\n          className=\"rounded border border-blue-700 p-1\"\n          selected={startDate}\n          onChange={setStartDate}\n          dateFormat=\"dd.MM.yyyy\"\n          customInput={<InputForDatePicker/>}\n        />\n      </div>\n\n      <div className=\"m-4\">\n        <p className=\"text-center\">\n          СПРАВКА-ДОКЛАД <br/>\n          о состоянии дел в ФГКУ \"12 ЦНИИ\" Минобороны России <br/>\n          на {startDate.toLocaleString(\"ru\")}\n        </p>\n        <p className=\"font-bold\">\n          1. Находятся на службе:\n        </p>\n        <p>\n          Всего <b>{onWorkAll.length}</b>, в том числе: <br/>\n          военнослужащие - <b>{onWorkMilitary.length}</b> чел., из них женщин с детьми до 14 лет\n          - {onWorkMilitaryWithChildren.length} чел. <br/>\n          гражданские - <b>{onWorkPeople.length}</b> чел., из них женщин с детьми до 14 лет\n          - {onWorkPeopleWithChildren.length} чел.\n        </p>\n        <div className=\"mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/3\"> ППД</p>\n            <p className=\"border p-1 inline-block w-1/3\"> Военнослужащих</p>\n            <p className=\"border p-1 inline-block w-1/3\"> Гр. персонала</p>\n          </div>\n          {listOfCity.map(el => {\n            return (\n              <div className=\"flex\">\n                <span className=\"border p-1 inline-block w-1/3\">{el.name}</span>\n                <span\n                  className=\"border p-1 inline-block w-1/3\"> {onWorkMilitary.filter(obj => obj.city_id === el.id).length}</span>\n                <span\n                  className=\"border p-1 inline-block w-1/3\">{onWorkPeople.filter(obj => obj.city_id === el.id).length}</span>\n              </div>\n            )\n          })}\n        </div>\n\n        <p>\n          <b>2. Число заболевших:</b><br/>\n          Всего - <b>{withDisease.length}</b> <br/>\n          в том числе:\n        </p>\n        <p className=\"font-bold text-center \">\n          Не ОРВИ {withNoInfectionAmb.length + withNoInfectionStat.length} - чел.\n          ({withNoInfectionAmb.filter(el => el.is_military).length + withNoInfectionAmb.filter(el => el.is_military).length} в/сл,\n          {withNoInfectionAmb.filter(el => !el.is_military).length + withNoInfectionAmb.filter(el => !el.is_military).length} гп)\n        </p>\n        <div className=\"mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\"> №</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Подразделение</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Воиское звание</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Фамилия, иницалы</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Комментарий</p>\n          </div>\n          <p className=\"font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withNoInfectionStat)}\n          <p className=\"font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withNoInfectionAmb)}\n        </div>\n        <p className=\"font-bold text-center mt-8\">\n          Пневмония {withPnevmoniaAmb.length + withPnevmoniaStat.length} - чел.\n          ({withPnevmoniaAmb.filter(el => el.is_military).length + withPnevmoniaStat.filter(el => el.is_military).length} в/сл,\n          {withPnevmoniaAmb.filter(el => !el.is_military).length + withPnevmoniaStat.filter(el => !el.is_military).length} гп)\n        </p>\n        <div className=\" mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\"> №</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Подразделение</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Воиское звание</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Фамилия, иницалы</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Комментарий</p>\n          </div>\n          <p className=\"font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withPnevmoniaStat)}\n          <p className=\"font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withPnevmoniaAmb)}\n        </div>\n\n        <p className=\"font-bold text-center mt-8\">\n          Острые респираторные вирусные инфекции (не коронавирусная\n          инфекция) {withRespiratornoStat.length + withRespiratornoAmb.length} - чел.\n          ({withRespiratornoStat.filter(el => el.is_military).length + withRespiratornoAmb.filter(el => el.is_military).length} в/сл,\n          {withRespiratornoStat.filter(el => !el.is_military).length + withRespiratornoAmb.filter(el => !el.is_military).length} гп)\n        </p>\n        <div className=\"mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\"> №</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Подразделение</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Воиское звание</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Фамилия, иницалы</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Комментарий</p>\n          </div>\n          <p className=\"font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withRespiratornoStat)}\n          <p className=\"font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withRespiratornoAmb)}\n        </div>\n\n        <p className=\"font-bold text-center mt-8\">\n          Число находящихся на карантине (изоляция) {withKarantin.length} - чел.\n          ({withKarantin.filter(el => el.is_military).length} в/сл,\n          {withKarantin.filter(el => !el.is_military).length} гп)\n        </p>\n        <div className=\"mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\"> №</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Подразделение</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Воиское звание</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Фамилия, иницалы</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Комментарий</p>\n          </div>\n          {makeTableData(withKarantin)}\n        </div>\n        <p className=\"font-bold text-center mt-8\">\n          Коронавирусная инфекция - {withCovidAmb.length + withCovidStat.length} чел.\n          ({withCovidAmb.filter(el => el.is_military).length + withCovidStat.filter(el => el.is_military).length} в/сл,\n          {withCovidAmb.filter(el => !el.is_military).length + withCovidStat.filter(el => !el.is_military).length} гп)\n        </p>\n        <div className=\"mt-1 text-center\">\n          <div className=\"flex\">\n            <p className=\"border p-1 inline-block w-1/5\"> №</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Подразделение</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Воиское звание</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Фамилия, иницалы</p>\n            <p className=\"border p-1 inline-block w-1/5\"> Комментарий</p>\n          </div>\n          <p className=\"font-bold text-center border p-1\">Стационар</p>\n          {makeTableData(withCovidStat)}\n          <p className=\"font-bold text-center border p-1\">Амбулаторно</p>\n          {makeTableData(withCovidAmb)}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default SeeReport","import React, {createRef, useEffect, useState} from 'react'\r\nimport Button, {InputForDatePicker} from \"./Button\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport workWithServer from \"../core/workWithServer\";\r\n\r\nfunction ListForEntering({headerRef, setShowBody}) {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const printRef = createRef();\r\n\r\n  const [listOfPerson, setListOfPerson] = useState([]);\r\n  const [listOfGroup, setListOfGroup] = useState([]);\r\n\r\n  const getListOfReport = () => {\r\n    workWithServer.getListOfReport({'date': startDate}).then(data => {\r\n      setListOfPerson(prevState => prevState.map(el => {\r\n        let index = data.filter(obj => obj.userForControl_id === el.id);\r\n        if (index.length > 0) return {...el, ...index[0]};\r\n        delete el['comment'];\r\n        delete el['status_id'];\r\n        return el\r\n      }))\r\n    })\r\n  };\r\n\r\n  useEffect(() => {\r\n    workWithServer.getListOfGroup().then(setListOfGroup);\r\n    workWithServer.getListOfPerson().then(data => {\r\n      setListOfPerson(data);\r\n      getListOfReport();\r\n    });\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getListOfReport();\r\n  }, [startDate]);\r\n\r\n  const onWorkAll = listOfPerson.filter(el => !el.status_id);\r\n\r\n  return (\r\n    <>\r\n      <div ref={printRef}>\r\n        <Button className=\"\" type='primary' text=\"Назад\" onClick={() => {\r\n          setShowBody('nothing')\r\n        }}/>\r\n        <Button className=\"\" type='success' text=\"Распечатать\" onClick={() => {\r\n          printRef.current.classList.add('hidden');\r\n          headerRef.current.classList.add('hidden');\r\n          window.print();\r\n          printRef.current.classList.remove('hidden');\r\n          headerRef.current.classList.remove('hidden');\r\n        }}/>\r\n        <DatePicker\r\n          className=\"rounded border border-blue-700 p-1\"\r\n          selected={startDate}\r\n          onChange={date => setStartDate(date)}\r\n          dateFormat=\"dd.MM.yyyy\"\r\n          customInput={<InputForDatePicker/>}\r\n        />\r\n      </div>\r\n      <p className=\"font-bold m-2 text-center text-2xl\">Списки на проход на {startDate.toLocaleDateString('ru')}</p>\r\n      {listOfGroup.map(group => {\r\n        const byGroup = onWorkAll.filter(person => person.group_id === group.id);\r\n        const massOdd = byGroup.filter((_, index) => index % 2 === 1);\r\n        const massEven = byGroup.filter((_, index) => index % 2 === 0);\r\n\r\n        return (\r\n          <>\r\n            {byGroup.length > 0\r\n              ?\r\n              <div style={{pageBreakAfter: 'always'}}>\r\n                <p className=\"mt-2 text-center font-semibold text-2xl border p-1\">{group.name}</p>\r\n                <div className=\"text-center text-xs\">\r\n                  <div className=\"flex\">\r\n                    <p className=\"border p-1 inline-block w-1/12\">№</p>\r\n                    <p className=\"border p-1 inline-block w-2/12\">Звание и ФИО</p>\r\n                    <p className=\"border p-1 inline-block w-3/12\">Примечание (время прохода)</p>\r\n                    <p className=\"border p-1 inline-block w-1/12\">№</p>\r\n                    <p className=\"border p-1 inline-block w-2/12\">Звание и ФИО</p>\r\n                    <p className=\"border p-1 inline-block w-3/12\">Примечание (время прохода)</p>\r\n                  </div>\r\n                  {massEven.map((el, index) => {\r\n                    const oddElem = massOdd[index];\r\n                    return (\r\n                      <div className=\"flex\">\r\n                        <p className=\"border p-1 inline-block w-1/12\">{index + 1}</p>\r\n                        <p\r\n                          className=\"border p-1 inline-block w-2/12 text-left\">{el.rank_id__name ? el.rank_id__name : 'гп'} {el.name}</p>\r\n                        <p className=\"border p-1 inline-block w-3/12 text-left\"> {el.comment}</p>\r\n                        {\r\n                          oddElem && (\r\n                            <>\r\n                              <p className=\"border p-1 inline-block w-1/12\">{massEven.length + index + 1}</p>\r\n                              <p\r\n                                className=\"border p-1 inline-block w-2/12 text-left\">{oddElem.rank_id__name ? oddElem.rank_id__name : 'гп'} {oddElem.name}</p>\r\n                              <p className=\"border p-1 inline-block w-3/12 text-left\"> {oddElem.comment}</p>\r\n                            </>\r\n                          )\r\n                        }\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n              : <></>\r\n            }\r\n          </>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ListForEntering","import React from 'react'\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\n\r\nexport default function Loader() {\r\n  const { promiseInProgress } = usePromiseTracker();\r\n  return (\r\n    promiseInProgress &&\r\n    <div id=\"loader\" className=\"absolute h-screen w-screen bg-gray-400 bg-opacity-25 text-center flex top-0\">\r\n      <p className=\"m-auto bg-blue-600 text-white border rounded animate-pulse p-4\">Идет загрузка данных...</p>\r\n    </div>\r\n  )\r\n}","import React, {createRef, useState} from \"react\";\nimport Button from \"./Button\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport ListOfPerson from \"./ListOfPerson\";\nimport MakeReport from \"./MakeReport\";\nimport SeeReport from \"./SeeReport\";\nimport ListForEntering from \"./ListForEntering\";\nimport Loader from \"./Loader\";\n\n\nfunction Home({user}) {\n  const [showBody, setShowBody] = useState('nothing');\n  const headerRef = createRef();\n\n  const mainButton = (\n    <div>\n      <Button className=\"\" type='primary' text=\"Управление л/с\" onClick={() => {\n        setShowBody('listOfPerson')\n      }}/>\n      <Button className=\"\" type='primary' text=\"Сформировать отчет\" onClick={() => {\n        setShowBody('makeReport')\n      }}/>\n    </div>\n  );\n\n  const bodyForCentre = () => {\n    switch (showBody) {\n      case 'listOfPerson':\n        return (<ListOfPerson setShowBody={setShowBody}/>);\n      case 'makeReport':\n        return (<MakeReport setShowBody={setShowBody}/>);\n      default:\n        return (mainButton)\n    }\n  };\n\n  const mainButtonForControl = (\n    <div>\n      <Button className=\"\" type='primary' text=\"Списки на проход\" onClick={() => {\n        setShowBody('listForEntering')\n      }}/>\n      <Button className=\"\" type='primary' text=\"Справка доклад\" onClick={() => {\n        setShowBody('report')\n      }}/>\n    </div>\n  );\n\n  const bodyForControl = () => {\n    switch (showBody) {\n      case 'listForEntering':\n        return (<ListForEntering headerRef={headerRef} setShowBody={setShowBody}/>);\n      case 'report':\n        return (<SeeReport headerRef={headerRef} setShowBody={setShowBody}/>);\n      default:\n        return (mainButtonForControl)\n    }\n  };\n\n  return (\n    <>\n      <Header headerRef={headerRef}/>\n      <div className=\"px-2\">\n        {user['is_control']\n          ? bodyForControl()\n          : bodyForCentre()\n\n        }\n      </div>\n      <Loader/>\n    </>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  }\n}\nexport default connect(mapStateToProps)(Home)","import React, {useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport workWithServer from \"./core/workWithServer\";\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport {initUser} from \"./redux/actions/actions\";\n\nfunction App({user, initUser}) {\n\tuseEffect(() => {\n\t\t\tworkWithServer.initUser()\n\t\t\t\t.then(data => {\n\t\t\t\t\tinitUser({...data, is_initial: true})\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tinitUser({...user, is_initial: true})\n\t\t\t\t})\n\t\t}, []\n\t);\n\n\treturn (\n\t\tuser.is_initial\n\t\t\t? (\n\t\t\t\tuser.username\n\t\t\t\t\t? <Home/>\n\t\t\t\t\t: <Login/>\n\t\t\t)\n\t\t\t: <span>Loading</span>\n\t)\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tuser: state.user,\n\t}\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\t\tinitUser: user => dispatch(initUser(user))\n\t}\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\nApp.propTypes = {\n\tuser: PropTypes.object,\n\tinitUser: PropTypes.func,\n};\n","import {InitUser} from \"../actions/actionsType\";\n\nconst initialState = {\n  username: '',\n  is_initial: false,\n}\n\nexport default function user(state = initialState, action) {\n  switch (action.type) {\n    case InitUser:\n      return {\n        ...state,\n        ...action.user,\n      }\n    default:\n      return state\n  }\n}","import {combineReducers} from 'redux'\nimport user from \"./reducers/user\";\n\nexport default combineReducers({\n  user,\n})","// @ts-ignore\nimport React from 'react';\n// @ts-ignore\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './tailwind.output.css';\n// @ts-ignore\nimport {BrowserRouter} from 'react-router-dom'\n\nimport {createStore} from 'redux'\n// @ts-ignore\nimport {Provider} from 'react-redux'\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App/>\n\t\t\t</BrowserRouter>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}